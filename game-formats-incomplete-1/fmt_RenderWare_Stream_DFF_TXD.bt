//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
enum <uint32> RwCorePluginID
{
	rwID_NAOBJECT               = 0x00,
	rwID_STRUCT                 = 0x01,
	rwID_STRING                 = 0x02,
	rwID_EXTENSION              = 0x03,
	rwID_CAMERA                 = 0x05,
	rwID_TEXTURE                = 0x06,
	rwID_MATERIAL               = 0x07,
	rwID_MATLIST                = 0x08,
	rwID_ATOMICSECT             = 0x09,
	rwID_PLANESECT              = 0x0A,
	rwID_WORLD                  = 0x0B,
	rwID_SPLINE                 = 0x0C,
	rwID_MATRIX                 = 0x0D,
	rwID_FRAMELIST              = 0x0E,
	rwID_GEOMETRY               = 0x0F,
	rwID_CLUMP                  = 0x10,
	rwID_LIGHT                  = 0x12,
	rwID_UNICODESTRING          = 0x13,
	rwID_ATOMIC                 = 0x14,
	rwID_TEXTURENATIVE          = 0x15,
	rwID_TEXDICTIONARY          = 0x16,
	rwID_ANIMDATABASE           = 0x17,
	rwID_IMAGE                  = 0x18,
	rwID_SKINANIMATION          = 0x19,
	rwID_GEOMETRYLIST           = 0x1A,
	rwID_HANIMANIMATION         = 0x1B,
	rwID_TEAM                   = 0x1C,
	rwID_CROWD                  = 0x1D,
	rwID_DMORPHANIMATION        = 0x1E,
	rwID_RIGHTTORENDER          = 0x1f,
	rwID_MTEFFECTNATIVE         = 0x20,
	rwID_MTEFFECTDICT           = 0x21,
	rwID_TEAMDICTIONARY         = 0x22,
	rwID_PITEXDICTIONARY        = 0x23,
	rwID_TOC                    = 0x24,
	rwID_PRTSTDGLOBALDATA       = 0x25,
	/* Insert before MAX and increment MAX */
	rwID_COREPLUGINIDMAX        = 0x26,
};


string libraryIDUnpackVersion( uint32 libraryID )
{
    if( libraryID & 0xFFFF0000 )
        return Str( "0x%X", ( libraryID >> 14 & 0x3FF00 ) + 0x30000 | ( libraryID >> 16 & 0x3F ) );

    return Str( "0x%X", libraryID << 8 );
};


struct CHUNK_HEADER {
    RwCorePluginID type;
    uint32 size;
    uint32 libraryID <format=hex, comment=libraryIDUnpackVersion>;
};

struct CHUNK;
uint32 sizeOfCHUNK( CHUNK &chunk )
{
    local uint32 size = ReadUInt(startof(chunk) + 4);
    return size ? size : sizeof(chunk);
};


struct CHUNK {
    CHUNK_HEADER header;
    
    if( header.size )
        switch( header.type )
        {
    
            default:
                CHUNK chunk <size=sizeOfCHUNK>;
                break;
        }
};

CHUNK chunk  <size=sizeOfCHUNK>;
