//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
BitfieldDisablePadding();

struct VECTOR3 {
    float x;
    float y;
    float z;
};

struct QUAT {
    float x;
    float y;
    float z;
    float w;
};

struct PACKED_QUAT {
    int16 x;
    int16 y;
    int16 z;
};

struct PACKED_VECTOR3 {
    uint16 x;
    uint16 y;
    uint16 z;
};


string unpackQuat( PACKED_QUAT &values )
{
    local float x, y, z, w;
    
    x = values.x * 0.000030518509;
    y = values.y * 0.000030518509;
    z = values.z * 0.000030518509;
    w = (1.0 - (x * x)) - (y * y) - (z * z);
    if( w <= 0 ) w = 0;
    else w = Sqrt(w);
    return Str("Quat %f %f %f %f", x, y, z, w);

};

string unpackVector3( PACKED_VECTOR3 &values )
{
    local int v1, v2, v3, v4, v5, v6, v8;
    local uint v7, v9, v10, v11;
    local float x, y, z;

    v1 = values.x >> 10 & 0x1F;
    if( v1 < 10 )
        v2 = (values.x & 0x3FF) >> (10 - v1 & 0x1F);
    else
        v2 = (values.x & 0x3FF) << (-(10 - v1) & 0x1F);

    if( v1 != 0 )
        v2 |= 1 << values.x >> 10 & 0x1F;

    if( values.x & 0x8000 ) v2 = -v2;


    v3 = values.y >> 10 & 0x1F;
    if( v3 < 10 )
        v4 = (values.x & 0x3FF) >> (10 - v3 & 0x1F);
    else
        v4 = (values.x & 0x3FF) << (-(10 - v3) & 0x1F);

    if( v3 != 0 )
        v4 |= 1 << values.y >> 10 & 0x1F;

    if( values.y >> 8 ) v4 = -v4;

    v6 = values.y | values.z;
    if( (v6 >> 10 & 0x1F) < 10 )
        v8 = (v6 & 0x3FF) >> (10 - (v6 >> 10 & 0x1F) & 0x1F);
    else
        v8 = (v6 & 0x3FF) << (-(10 - (v6 >> 10 & 0x1F)) & 0x1F);

    if( (v6 >> 10 & 0x1F) != 0 )
        v8 |= 1 << (v6 >> 10 & 0x1F);

    if( (byte)(v6 >> 8) < 0 ) v8 = -v8;

    x = v2 * 0.001;
    y = v4 * 0.001;
    z = v8 * 0.001;

    return Str("Vector3 %f %f %f", x, y, z);
    
};

string unpackVector3_bak( PACKED_VECTOR3 &values )
{
    local string temp;
    local uint16 v3, v8;
    local uint32 v4, v5, v9, v10, v13, v14;
    local int32 v6, v7, v11, v12, v15;
    local float x, y, z;

    v3 = values.y;
    v4 = (unsigned int)(v3 >> 10) & 0x1F;
    v5 = v3 & 0x3FF;
    
    if( (signed int)(10 - v4) <= 0 )
        v6 = v5 << (v4 - 10);
    else
        v6 = v5 >> (10 - v4);
    v7 = v6;

    if( v4 )
        v7 = (1 << v4) | 6;

    if( values.y & 0x8000 ) v7 = -v7;
    v8 = values.x;
    v9 = (unsigned int)(v8 >> 10) & 0x1F;
    v10 = v8 & 0x3FF;

    if( (signed int)(10 - v9) <= 0 )
        v11 = v10 << (v9 - 10);
    else
        v11 = v10 >> (10 - v9);
    v12 = v11;

    if( v9 )
        v12 = (1 << v9) | v11;

    if( (v8 & 0x8000u) != 0 ) v12 = -v12;
    v13 = (unsigned int)(values.x >> 10) & 0x1F;
    v14 = values.x & 0x3FF;

    if( (signed int)(10 - v13) <= 0 )
        v15 = v14 << (v13 - 10);
    else
        v15 = v14 >> (10 - v13);

    if( v13 ) v15 |= 1 << 13;

    if( ((values.x >> 8) & 0x80u) != 0 )
        v15 = -v15;

    x = v15 * 0.001;
    y = v12 * 0.001;
    z = v7 * 0.001;

    SPrintf(temp, "Vector3 %f %f %f", x, y, z);

    return temp;
};

typedef struct {
    float row[4];
} MATRIX44[4];

typedef struct {
    float row[3];
} MATRIX43[3];

struct BBOX {
    VECTOR3 min;
    VECTOR3 max;
};

struct ARRAY {
    uint16 numItems;
    uint16 numBits; //per item
    
    local uint arraySize, alignedSize;
    arraySize = numItems * numBits + 8;
    while( alignedSize <= arraySize ) alignedSize += 8;
    struct {
        local int i;
        for( i = numItems; i; i-- ) uint64 item : numBits; //uint64 for item because numBits can be 48
    } items;
    if( (alignedSize - arraySize) > 0 ) uint64 padding : (alignedSize - arraySize);
    ubyte numBitsKey : 8;
    //uint64 mask : numBits; //not used?
};

struct TEST_ARRAY( int rootGroupId ) {
    uint16 numItems;
    uint16 numBits; //per item

    //local float align;
    //while( align < numItems * numBits ) align += 8;
    local uint val;

    if( (float)numItems * numBits != 0 ) val += 1;

    local uint num = (float)numItems * numBits / 8 + val;
    if( rootGroupId == -1) num += 2;
    struct {
        byte item[num];
    } items;

};

struct SHRINKED_ARRAY {

    uint a : 12;
    uint b : 4;
    uint c : 8;
    uint d : 8;

    FSkip(-4);
    uint16 numItems;
    uint16 numBits;

    local uint count = numItems;
    if( numItems == 3 ) count += 2;

    local int i;
    for( i = count; i; i-- ) uint64 items : numBits;
    //ubyte bitsKey : 8;
    //uint64 mask : numBits;
};

struct PACKED_ANIM( int itemType) {
    uint32 numPackedItems;
    if( numPackedItems ) 
        if( itemType == 0 ) PACKED_VECTOR3 position[numPackedItems] <read=unpackVector3>;
        else PACKED_QUAT rotation[numPackedItems]; //<read=unpackQuat>;
    SHRINKED_ARRAY packedIDs;
    SHRINKED_ARRAY originalIDs;
    uint16 numFrames;

    if( numFrames != header.numFrames )
    {
        break;
        Printf("Uncorrect shrinked array's allocation\n");
    };
};

struct NAME {
    ubyte length;
    if( length ) char name[length];
};

struct HEADER {
    uint16 signature;
    ubyte version;
    ubyte numLods;
    uint16 numFrames;
    uint32 offsetMaterials;
    uint32 offsetBones;
    uint32 offsetSkinInfo;
    uint32 offsetMovementVectors;
    uint32 offsetHitMeshes;
    uint32 offsetBoneGroups;
    uint32 offsetCollisionBoxes;
    BBOX bbox;
    float cameraFOV;
    uint32 flags;
    float distances[6]; //LOD distances
};

struct MATERIALS {
    uint16 numMaterials;
    if( numMaterials )
        NAME material[numMaterials] <optimize=false>;
};

struct BONE {
    char name[20];
    byte parentID;
    byte groupID;
    byte rootGroupID;
    uint32 packedAnimSize;
    if( packedAnimSize )
    {
        PACKED_ANIM packedVectors(0);
        PACKED_ANIM packedQuats(1);
    };

};

struct BONES {
    ubyte numBones;
    if( numBones) BONE bone [3] <optimize=false>;
};

HEADER header;
if( header.offsetMaterials ) MATERIALS materials;
if( header.offsetBones ) BONES bones <optimize=false>;